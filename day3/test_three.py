from functools import reduce

import pytest

from day3.three import count_trees, infer_rest_of_path

lines = [
    "..##.........##.........##.........##.........##.........##.......",
    "#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..",
    ".#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.",
    "..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#",
    ".#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.",
    "..#.##.......#.##.......#.##.......#.##.......#.##.......#.##.....",
    ".#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#.#.#.#....#",
    ".#........#.#........#.#........#.#........#.#........#.#........#",
    "#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...#.##...#...",
    "#...##....##...##....##...##....##...##....##...##....##...##....#",
    ".#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#.#..#...#.#",
]

down_lines = [
    "..##.........##.........##.........##.........##.........##.......",
    "#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..#...#...#..",
    ".#....#..#..#....#..#..#....#..#..#....#..#..#....#..#..#....#..#.",
    ".####...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#..#.#...#.#",
    ".#...##..#..#...##..#..#...##..#..#...##..#..#...##..#..#...##..#.",
]


def test_count_trees():
    assert count_trees(lines) == 7


def test_infer_rest_of_path():

    line = "....#.........#...#..##....#.."
    assert infer_rest_of_path(line, 2) == "....#.........#...#..##....#......#.........#...#..##....#.."


def test_count_trees_with_different_slopes():
    slopes = [
        (1, 1),  # 2
        (3, 1),  # 7
        (5, 1),  # 3
        (7, 1),  # 4
        (1, 2),  # 2
    ]
    trees = []
    for right, down in slopes:
        trees.append(count_trees(lines, right, down))

    assert reduce(lambda x, y: x * y, trees) == 336


@pytest.mark.parametrize('data, right, down, expected', [
    (lines, 1, 2, 2),
    (down_lines, 3, 3, 1),
    (lines, 3, 4, 0),
    (lines, 5, 1, 3),
    (lines, 7, 1, 4),
    (lines, 1, 1, 2),
    (lines, 3, 1, 7),
    (lines, 5, 1, 3),
])
def test_count_trees_with_variable_right_and_down(data, right, down, expected):
    assert count_trees(data, right, down) == expected
